package source

import (
	"fmt"

	jsoniter "github.com/json-iterator/go"
	"github.com/samuncle-jqk/httpProxyPool/provider"
	"github.com/samuncle-jqk/httpProxyPool/utils"
	"github.com/sirupsen/logrus"
	"github.com/spf13/viper"
)

type Zdy struct {
}

func (z Zdy) GetRequestInterval() int {
	return viper.GetInt("proxy.zdy.interval_time")
}

func (z Zdy) GetSource() string {
	return viper.GetString("proxy.zdy.source")
}

func (z Zdy) GetProxyIp() provider.ProxyIpResponse {
	var (
		req    = viper.GetString("proxy.zdy.req_ip")
		appId  = viper.GetString("proxy.zdy.app_id")
		appKey = viper.GetString("proxy.zdy.app_key")
		result provider.ProxyIpResponse
	)
	r := utils.NewRestyRequestChrome(nil)
	resp, err := r.Get(fmt.Sprintf(req, appId, appKey))
	if err != nil {
		logrus.WithFields(logrus.Fields{
			"err": err,
		}).Error("GetProxyIp request api fail")
		result.Err = err
		return result
	}

	type autoGenerated struct {
		Code string `json:"code"`
		Msg  string `json:"msg"`
		Data struct {
			Count     int `json:"count"`
			ProxyList []struct {
				IP       string `json:"ip"`
				Port     int    `json:"port"`
				Adr      string `json:"adr"`
				Timeout  int    `json:"timeout"`
				Cometime int    `json:"cometime"`
			} `json:"proxy_list"`
		} `json:"data"`
	}

	var rsp = autoGenerated{}
	if err := jsoniter.Unmarshal(resp.Body(), &rsp); err != nil {
		logrus.WithFields(logrus.Fields{
			"err": err,
			"rsp": rsp,
		}).Error("GetProxyIp-unmarshal")
		result.Err = err
		return result
	}

	if rsp.Code != "10001" {
		logrus.WithFields(logrus.Fields{
			"err":  rsp.Msg,
			"code": rsp.Code,
			"rsp":  rsp,
		}).Error("GetProxyIp-unmarshal")
		result.Err = fmt.Errorf("%v", rsp.Msg)
		return result
	}

	for _, p := range rsp.Data.ProxyList {
		result.List = append(result.List, provider.ProxyIp{
			Ip:   p.IP,
			Port: p.Port,
			Addr: p.Adr,
			Ttl:  p.Timeout,
		})
	}

	return result
}

func (z Zdy) BindWhiteIp() {
	var (
		req    = viper.GetString("proxy.zdy.write_ip")
		appId  = viper.GetString("proxy.zdy.app_id")
		appKey = viper.GetString("proxy.zdy.app_key")
	)
	r := utils.NewRestyRequestChrome(nil)
	resp, err := r.Get(fmt.Sprintf(req, appId, appKey))
	if err != nil {
		logrus.WithFields(logrus.Fields{
			"err": err,
		}).Error("BindWhiteIp request api fail")
		return
	}

	type autoGenerated struct {
		Code string `json:"code"`
		Msg  string `json:"msg"`
	}

	var rsp = autoGenerated{}
	if err := jsoniter.Unmarshal(resp.Body(), &rsp); err != nil {
		logrus.WithFields(logrus.Fields{
			"err": err,
			"rsp": rsp,
		}).Error("BindWhiteIp-unmarshal")
		return
	}

	if rsp.Code != "10001" {
		logrus.WithFields(logrus.Fields{
			"err":  rsp.Msg,
			"code": rsp.Code,
			"rsp":  rsp,
		}).Error("BindWhiteIp-unmarshal")
		return
	}

	logrus.Info("BindWhiteIp request success")
}
